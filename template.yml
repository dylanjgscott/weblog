AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: Static website

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          Action: s3:GetObject
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          Resource: !Sub ${Bucket.Arn}/*
        Version: 2012-10-17

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - dylanscott.com.au
        CustomErrorResponses:
          - ErrorCode: 400
            ResponseCode: 400
            ResponsePagePath: /error.html
          - ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: /error.html
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html
          - ErrorCode: 405
            ResponseCode: 405
            ResponsePagePath: /error.html
          - ErrorCode: 414
            ResponseCode: 414
            ResponsePagePath: /error.html
          - ErrorCode: 500
            ResponseCode: 500
            ResponsePagePath: /error.html
          - ErrorCode: 501
            ResponseCode: 501
            ResponsePagePath: /error.html
          - ErrorCode: 502
            ResponseCode: 502
            ResponsePagePath: /error.html
          - ErrorCode: 503
            ResponseCode: 503
            ResponsePagePath: /error.html
          - ErrorCode: 504
            ResponseCode: 504
            ResponsePagePath: /error.html
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          LambdaFunctionAssociations: 
            - EventType: origin-response
              LambdaFunctionARN: !Ref EdgeFunction.Version
          TargetOriginId: bucket
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt Bucket.DomainName
            Id: bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:584259415401:certificate/51703ea6-4369-45ac-abeb-0220fdba3202
          SslSupportMethod: sni-only

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: ''

  EdgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: edge
      Handler: index.handler
      InlineCode: !Sub
        - |
            import json
            def add_header(response, key, value):
              response['headers'][key] = [ { 'value': value } ]
            def handler(event, context):
              response = event['Records'][0]['cf']['response']
              print(json.dumps(response))
              add_header(response, 'content-security-policy', "default-src 'none'; report-uri ${ReportUri}")
              add_header(response, 'expect-ct', 'enforce, max-age=86400, report-uri="${ReportUri}"')
              add_header(response, 'feature-policy', "vibrate 'none'")
              add_header(response, 'referrer-policy', 'no-referrer')
              add_header(response, 'strict-transport-security', 'includeSubDomains; max-age=31536000; preload')
              add_header(response, 'x-content-type-options', 'nosniff')
              add_header(response, 'x-frame-options', 'deny')
              print(json.dumps(response))
              return response
        - ReportUri: !Sub https://${ReportApi}.execute-api.${AWS::Region}.amazonaws.com/${ReportApi.Stage}
      Role: !GetAtt Role.Arn
      Runtime: python3.7

  ReportApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: production

  ReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        Report:
            Type: Api
            Properties:
                Method: POST
                Path: /
                RestApiId: !Ref ReportApi
      Handler: index.handler
      InlineCode: |
        import json
        def handler(event, context):
          print(json.dumps(event))
          response = {
            'statusCode': 204,
          }
          return response
      Runtime: python3.7

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:

  BucketName:
    Description: CloudFront distribution origin bucket name
    Value: !Ref Bucket

  DistributionDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt CloudFrontDistribution.DomainName
